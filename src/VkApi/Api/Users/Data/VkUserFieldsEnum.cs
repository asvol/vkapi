using VkApi;
using Newtonsoft.Json;

namespace VkApi
{
    public enum VkUserFieldsEnum
    {
        /// <summary>
        /// Возвращаемые значения: 1 - женский, 2 - мужской, 0 - без указания пола. 
        /// </summary>
        [EnumValue("sex")]
        Sex,
        /// <summary>
        /// Дата рождения, выдаётся в формате: "23.11.1981" или "21.9" (если год скрыт).
        /// </summary>
        [EnumValue("bdate")]
        Bdate,

        /// <summary>
        /// Выдаётся id города, указанного у пользователя в разделе "Контакты". 
        /// Название города по его id можно узнать при помощи метода getCities. 
        /// Если город не указан, то при приёме данных в формате XML в узле user отсутствует тег city. 
        /// </summary>
        [EnumValue("city")]
        City,

        /// <summary>
        /// Выдаётся id страны, указанной у пользователя в разделе "Контакты". 
        /// Название страны по её id можно узнать при помощи метода getCountries. 
        /// Если страна не указана, то при приёме данных в формате XML в узле user отсутствует тег country. 
        /// </summary>
        [EnumValue("country")]
        Country,

        /// <summary>
        /// Выдаётся url квадратной  фотографии пользователя, имеющей ширину 50 пикселей. 
        /// В случае отсутствия у пользователя фотографии выдаётся ответ: "http://vkontakte.ru/images/camera_c.gif" 
        /// </summary>
        [EnumValue("photo_50")]
        Photo50,

        /// <summary>
        /// Выдаётся url квадратной фотографии пользователя, имеющей ширину 100 пикселей. 
        /// В случае отсутствия у пользователя фотографии выдаётся ответ: "http://vkontakte.ru/images/camera_b.gif" 
        /// </summary>
        [EnumValue("photo_100")]
        Photo100,

        /// <summary>
        /// Выдаётся url фотографии пользователя, имеющей ширину 200 пикселей. 
        /// В случае отсутствия у пользователя фотографии выдаётся ответ: "http://vkontakte.ru/images/camera_a.gif"   
        /// </summary>
        [EnumValue("photo_200")]
        Photo200,

        /// <summary>
        /// Выдаётся url квадратной фотографии пользователя, имеющей ширину 200 пикселей.  
        /// Если фотография была загружена давно, фотографии с такими размерами может не быть, в этом случае будет возвращено false.  
        /// </summary>
        [EnumValue("photo_200_orig")]
        Photo200Orig,

        /// <summary>
        /// Выдаётся url фотографии пользователя, имеющей ширину 400 пикселей.  
        /// В случае отсутствия у пользователя фотографии такого размера поле возвращено не будет. 
        /// </summary>
        [EnumValue("photo_400_orig")]
        Photo400Orig,

        /// <summary>
        /// Выдаётся url квадратной фотографии пользователя, максимального размера. Может быть возвращена фотография имеющая ширину как 200 так и 100 пикселей. 
        /// В случае отсутствия у пользователя фотографии выдаётся ответ: "http://vkontakte.ru/images/camera_b.gif"  
        /// </summary>
        [EnumValue("photo_max")]
        PhotoMax,

        /// <summary>
        /// Выдаётся url фотографии пользователя, максимального размера. Может быть возвращена фотография имеющая ширину как 400 так и 200 пикселей. 
        /// В случае отсутствия у пользователя фотографии выдаётся ответ: "http://vkontakte.ru/images/camera_a.gif"  
        /// </summary>
        [EnumValue("photo_max_orig")]
        PhotoMaxOrig,

        /// <summary>
        /// Показывает, находится ли этот пользователь сейчас на сайте. Поле доступно только для метода friends.get. 
        /// Возвращаемые значения: 1 - находится, 0 - не находится.  
        /// Если пользователь использует мобильное приложение либо мобильную версию сайта - будет возвращено дополнительное поле online_mobile. 
        /// (Получить статус мобильного приложения можно написав на apps@vk.com либо в техподдержку сайта) 
        /// Если пользователь использует именно приложение а не сайт - то идентификатор приложения будет возвращен в поле online_app. 
        /// </summary>
        [EnumValue("online")]
        Online,

        /// <summary>
        /// Список, содержащий id списков друзей, в которых состоит текущий друг пользователя. Метод получения id и названий списков: friends.getLists. 
        /// Поле доступно только для метода friends.get. Если текущий друг не состоит ни в одном списке, то при приёме данных в формате XML в узле user отсутствует тег lists. 
        /// </summary>
        [EnumValue("lists")]
        Lists,

        /// <summary>
        /// Возвращает короткий адрес страницы (возвращается только имя адреса, например andrew). Если пользователь не менял адрес своей страницы, возвращается 'id'+uid, например id35828305. 
        /// </summary>
        [EnumValue("screen_name")]
        ScreenName,

        /// <summary>
        /// Показывает, известен ли номер мобильного телефона пользователя. 
        /// Возвращаемые значения: 1 - известен, 0 - не известен. 
        /// Рекомендуется перед вызовом метода secure.sendSMSNotification. 
        /// </summary>
        [EnumValue("has_mobile")]
        HasMobile,
        /// <summary>
        /// Возвращает поля:
        /// mobile_phone мобильный телефон пользователя (Если мобильный телефон скрыт приватностью – то он доступен только Desktop приложениям)
        /// home_phone домашний телефон пользователя
        /// если эти данные указаны и не скрыты соотвествующими настройками приватности. 
        /// </summary>
        [EnumValue("contacts")]
        Contacts,
        /// <summary>
        /// Возвращает код и название университета пользователя, а также факультет и год окончания.  
        /// </summary>
        [EnumValue("education")]
        Education,

//        /// <summary>
//        /// Список высших учебных заведений, в которых учился текущий пользователь. 
//        /// </summary>
//        [EnumValue("universities")]
//        Universities,
//
//        /// <summary>
//        /// Список школ, в которых учился текущий пользователь. 
//        /// </summary>
//        [EnumValue("schools")]
//        Schools,

        /// <summary>
        /// Разрешено ли оставлять записи на стене у данного пользователя. 
        /// </summary>
        [EnumValue("can_post")]
        CanPost,

        /// <summary>
        /// Разрешено ли текущему пользователю видеть записи других пользователей на стене данного пользователя. 
        /// </summary>
        [EnumValue("can_see_all_posts")]
        CanSeeAllPosts,

        /// <summary>
        /// Разрешено ли написание личных сообщений данному пользователю. 
        /// </summary>
        [EnumValue("can_write_private_message")]
        CanWritePrivateMessage,

        /// <summary>
        /// Возвращает статус, расположенный в профиле, под именем пользователя 
        /// </summary>
        [EnumValue("activity")]
        Activity,

        /// <summary>
        /// Возвращает объект, содержащий поле time, в котором содержится время последнего захода пользователя. 
        /// </summary>
        [EnumValue("last_seen")]
        LastSeen,

        /// <summary>
        /// Возвращает семейное положение пользователя: 
        /// 1 - не женат/не замужем 
        /// 2 - есть друг/есть подруга 
        /// 3 - помолвлен/помолвлена 
        /// 4 - женат/замужем 
        /// 5 - всё сложно 
        /// 6 - в активном поиске 
        /// 7 - влюблён/влюблена 
        /// </summary>
        [EnumValue("relation")]
        Relation,

        /// <summary>
        /// Данное поле возвращается только в том случае, если получается не больше одного профиля. 
        /// Если никнейм отсутствует, то при приёме данных в формате XML в узле user содержится пустой тег <nickname/>. 
        /// </summary>
        [EnumValue("nickname")]
        Nickname,

        /// <summary>
        /// Возвращает список родственников текущего пользователя, в виде объектов, содержащих поля uid и type. type может принимать одно из следующих значений: grandchild, grandparent, child, sibling, parent. 
        /// </summary>
        [EnumValue("relatives")]
        Relatives,
    }
}