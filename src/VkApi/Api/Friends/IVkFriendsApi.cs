using System.Threading.Tasks;

namespace VkApi
{
    public interface IVkFriendsApi
    {
        /// <summary>
        /// Возвращает список идентификаторов друзей пользователя 
        /// </summary>
        /// <param name="uid">идентификатор пользователя, для которого необходимо получить список друзей. Если параметр не задан, то считается, что он равен идентификатору текущего пользователя.</param>
        /// <param name="count">количество друзей, которое нужно вернуть. (по умолчанию – все друзья)</param>
        /// <param name="offset">смещение, необходимое для выборки определенного подмножества друзей.</param>
        /// <param name="lid">идентификатор списка друзей, полученный методом friends.getLists, друзей из которого необходимо получить. Данный параметр учитывается, только когда параметр uid равен идентификатору текущего пользователя.</param>
        /// <param name="order">Порядок в котором нужно вернуть список друзей. Допустимые значения: name - сортировать по имени (работает только при переданном параметре fieldsEnum). hints - сортировать по рейтингу, аналогично тому, как друзья сортируются в разделе Мои друзья (данный параметр доступен только для Desktop-приложений). </param>
        /// <returns></returns>
        Task<int[]> GetIds(int? uid = null, int? count = null, int? offset = null, int? lid = null,VkFriendsFieldsOrder? order = null);

        /// <summary>
        /// Возвращает список друзей пользователя с информацией о каждом пользователе
        /// </summary>
        /// <param name="uid">идентификатор пользователя, для которого необходимо получить список друзей. Если параметр не задан, то считается, что он равен идентификатору текущего пользователя.</param>
        /// <param name="count">количество друзей, которое нужно вернуть. (по умолчанию – все друзья)</param>
        /// <param name="offset">смещение, необходимое для выборки определенного подмножества друзей.</param>
        /// <param name="lid">идентификатор списка друзей, полученный методом friends.getLists, друзей из которого необходимо получить. Данный параметр учитывается, только когда параметр uid равен идентификатору текущего пользователя.</param>
        /// <param name="order">Порядок в котором нужно вернуть список друзей. Допустимые значения: name - сортировать по имени (работает только при переданном параметре fieldsEnum). hints - сортировать по рейтингу, аналогично тому, как друзья сортируются в разделе Мои друзья (данный параметр доступен только для Desktop-приложений). </param>
        /// <param name="fieldsEnum">Список возвращаемых полей </param>
        /// <returns></returns>
        Task<VkUserResult[]> Get(int? uid = null, int? count = null, int? offset = null, int? lid = null, VkFriendsFieldsOrder? order = null, params VkUserFieldsEnum[] fieldsEnum);
        /// <summary>
        /// Возвращает список друзей пользователя с полной информацией о каждом пользователе
        /// </summary>
        /// <param name="uid">идентификатор пользователя, для которого необходимо получить список друзей. Если параметр не задан, то считается, что он равен идентификатору текущего пользователя.</param>
        /// <param name="count">количество друзей, которое нужно вернуть. (по умолчанию – все друзья)</param>
        /// <param name="offset">смещение, необходимое для выборки определенного подмножества друзей.</param>
        /// <param name="lid">идентификатор списка друзей, полученный методом friends.getLists, друзей из которого необходимо получить. Данный параметр учитывается, только когда параметр uid равен идентификатору текущего пользователя.</param>
        /// <param name="order">Порядок в котором нужно вернуть список друзей. Допустимые значения: name - сортировать по имени (работает только при переданном параметре fieldsEnum). hints - сортировать по рейтингу, аналогично тому, как друзья сортируются в разделе Мои друзья (данный параметр доступен только для Desktop-приложений). </param>
        /// <returns></returns>
        Task<VkUserResult[]> GetAllInfo(int? uid = null, int? count = null, int? offset = null, int? lid = null, VkFriendsFieldsOrder? order = null);

        /// <summary>
        /// Если идентификатор выбранного пользователя присутствует в списке заявок на добавление в друзья, полученным методом friends.getRequests, то одобряет заявку на добавление и добавляет выбранного пользователя в друзья к текущему пользователю. В противном случае создает заявку на добавление в друзья текущего пользователя к выбранному пользователю. 
        /// </summary>
        /// <param name="uid"></param>
        /// <param name="text"></param>
        /// <param name="capchasid">полученный идентификатор  </param>
        /// <param name="capchakey">текст, который ввел пользователь </param>
        /// <returns></returns>
        Task<VkAddFriendsResultEnum> Add(int uid, string text = null,string capchasid = null, string capchakey = null);
    }
}